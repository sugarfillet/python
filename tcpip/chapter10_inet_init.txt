#chapter10
网络协议族

1. S.net_proto_family  G.net_families F.sock_register()

struct net_proto_family {//协议族类
        int             family; #PF_INET PF_TIPC PF_NETLINK PF_ROUTE PF_UNIX  PF_PACKET(tcpdump)
        int             (*create)(struct socket *sock, int protocol); #该pf的socket的创建函数  F.inet_create
        struct module   *owner;
};

2. S.inet_protosw G.inetsw_array[] F.inet_init H.inetsw #已套接口类型为key组成的链表 #可以理解为inet_protosw  #图10-2
/* This is used to register socket interfaces for IP protocols.  */
struct inet_protosw { //某一类型的套接口
        struct list_head list;

        /* These two fields form the lookup key.  */
        unsigned short   type;     /* This is the 2nd argument to socket(2). */ 
		                        #pfinet套接口类型 stream dgram raw
        unsigned short   protocol; /* This is the L4 protocol number.  */
									# tcp udp 
        struct proto     *prot;  # 该类型套接口的网络层接口 #
        const struct proto_ops *ops; # 该类型套接口的传输层接口

        int              capability; /* Which (if any) capability do
                                      * we need to use this socket
                                      * interface?
                                      */
        char             no_check;   /* checksum on rcv/xmit/none? */ 
        unsigned char    flags;      /* See INET_PROTOSW_* below.  */ #初始化sock的is_icsk成员 
							#
};	
   
   
3. S.net_protocol G.inet_protos[] F.inet_add_protocol 

struct net_protocol { #某一[inet]协议族内的传输层协议接收例程
        int                     (*handler)(struct sk_buff *skb); #3层上送4层的依据 #tcp_v4_rcv upd_rcv icpm_rcv
        void                    (*err_handler)(struct sk_buff *skb, u32 info); #错报处理 
        int                     (*gso_send_check)(struct sk_buff *skb);#提供给设备的分段函数
        struct sk_buff         *(*gso_segment)(struct sk_buff *skb,
                                               int features); 
        int                     no_policy; #是否进行策略路由，tcp udp 不进程策略路由
};

4. F.inet_init 
	#proto_register(&tcp_prot, 1); #分配slab ，list_add(&prot->node, &proto_list); #/proc/net/protocols #注册所有协议操作
	#sock_register(&inet_family_ops);#让套接口层支持pf_inet 
	#inet_add_protocol(&icmp_protocol, IPPROTO_ICMP) #填充inet_protos[]#让网络成明确接收函数明确接收函数
	#基于&inetsw_array[] #实现不同接口类型的散列表inetsw #让套接口层支持不同类型的socket
	#arp_init #初始化arp_tbl #注册arp的接收函数 #sysctl #通知连
	#ip_init
	#tcp_v4_init(&inet_family_ops)#内核的tcp套接口 用来发送rst ack
	#tcp_init
	#ipv4_proc_init
	#dev_add_pack(&ip_packet_type); #注册ip接收函数
